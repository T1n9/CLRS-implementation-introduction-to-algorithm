Some problems have exponential running time if we try to solve them with normal recursion.

This phenomenon occurs when the recursion tries to solve the same subproblem over and over again.
In dynamic programming the result of the solved subproblems will be saved in a table, so they will be only solved for once. 
This is called time-memory trade off. We use some extra space and try to save time from it. This reduces the running time from 
exponential to polynomial.

Optimal substructure:
1. substructures should be independent, which means the solution of one substructure should not affect the solution of 
another substructure.
2. it is eligible if the the recursive algorithm for the problem solves the same subproblems over and over, rather than always 
generating new subproblems. 

normally we can also do it from upside down with resursion with memoization. The running time will be polynomial. But it will be 
still slightly slower than from bottom up due to the recursive cost and less cost of maintaining the table.
